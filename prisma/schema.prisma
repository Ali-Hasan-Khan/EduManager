generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(UNKNOW)
  gender                UserGender             @default(UNKNOW)
  isTwoFactorEnabled    Boolean                @default(false)
  status                UserStatus             @default(UNKNOW)
  accounts              Account[]
  student               Students?
  teacher               Teachers?
  twoFactorConfirmation TwoFactorConfirmation?
  markedAttendance      Attendance[]           // Added attendance relation
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teachers {
  id         String        @id @default(cuid())
  userId     String        @unique
  name       String?
  assignment Assignments[] @relation("assignmenttoteacher")
  lesson     Lessons[]     @relation("lessontoteacher")
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Students {
  id          String        @id @default(cuid())
  userId      String        @unique
  name        String?
  onClassroom OnClassroom[]
  attendance  Attendance[]  // Added attendance relation
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Classrooms {
  id                 String        @id @default(cuid())
  name               String
  cap                String
  assingment         Assignments[] @relation("classroomstoassingment")
  studentOnclassroom OnClassroom[]
  schedule           Schedule[]    @relation("classtoschedule")
  attendance         Attendance[]  // Added attendance relation
}

model OnClassroom {
  id          String     @id @default(cuid())
  userId      String
  classroomId String
  classroom   Classrooms @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  student     Students   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, classroomId])
}

model Lessons {
  id         String         @id @default(cuid())
  name       String
  teacherId  String
  cat        LessonCategory
  assingment Assignments[]  @relation("lessontoassingment")
  teacher    Teachers       @relation("lessontoteacher", fields: [teacherId], references: [userId], onDelete: Cascade)
  schedule   Schedule[]     @relation("lessontoschedule")
  attendance Attendance[]   // Added attendance relation

  @@index([teacherId])
}

model Schedule {
  id        String     @id @default(cuid())
  lessonId  String
  classId   String
  day       DateTime
  time      String
  classroom Classrooms @relation("classtoschedule", fields: [classId], references: [id], onDelete: Cascade)
  lesson    Lessons    @relation("lessontoschedule", fields: [lessonId], references: [id], onDelete: Cascade)
  attendance Attendance[] // Added attendance relation

  @@index([lessonId, classId])
}

model Assignments {
  id        String     @id @default(cuid())
  task      String
  lessonId  String
  classId   String
  createBy  String
  deadline  DateTime
  fileUrl   String?
  time      String
  classroom Classrooms @relation("classroomstoassingment", fields: [classId], references: [id], onDelete: Cascade)
  teacher   Teachers   @relation("assignmenttoteacher", fields: [createBy], references: [userId], onDelete: Cascade)
  lesson    Lessons    @relation("lessontoassingment", fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId, classId, createBy])
}

model Attendance {
  id          String   @id @default(cuid())
  studentId   String
  scheduleId  String
  classId     String
  lessonId    String
  date        DateTime
  status      AttendanceStatus @default(PRESENT)
  markedBy    String
  markedAt    DateTime @default(now())
  
  // Relations
  student     Students   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  schedule    Schedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  classroom   Classrooms @relation(fields: [classId], references: [id], onDelete: Cascade)
  lesson      Lessons    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  markedByUser User      @relation(fields: [markedBy], references: [id], onDelete: Cascade)
  
  // Indexes for better performance
  @@index([studentId])
  @@index([scheduleId])
  @@index([classId])
  @@index([lessonId])
  @@index([date])
  
  // Unique constraint to prevent duplicate attendance
  @@unique([studentId, scheduleId, date])
  
  @@map("attendance")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  UNKNOW
}

enum UserGender {
  MALE
  FEMALE
  UNKNOW
}

enum UserStatus {
  ACTIVE
  IN_ACTIVE
  BANNED
  UNKNOW
}

enum LessonCategory {
  LANGUANGES
  ART
  SCIENCE
  SPORT
}
